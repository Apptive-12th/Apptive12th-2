MVC 패턴

model - view - controller 의 약자
아키텍쳐 패턴, 소프트웨어 디자인 패턴이다
사용자 인터페이스로부터 비즈니스 로직 분리 -> 유지보수가 쉽다

Model : 뷰와 컨트롤러 사이에서 전달되는 데이터(view model)
또는 데이터와 데이터에 대한 작업, 규칙(domain model)
데이터 변경에 따른 내용을 view를 통해 업데이트한다
백그라운드에서 동작하는 로직을 처리한다

view : 사용자 눈에 보여지는 부분(사용자 인터페이스)
데이터 및 객체의 입력, 출력을 담당한다
화면에 표출되는 방식에 대한 로직이 들어가야하며, model 에 의해 업데이트 된다
-model을 직접 사용하여 업데이트
-model이 갱신 정보를 view에게 알려주는 방식(observer interface)

controller : 뷰와 모델을 연결한다
사용자 입력 처리, 데이터 흐름을 제어하고
사용자에게 보여줄 적절한 뷰를 선택
직접 view를 업데이트하지 않음

모델과 뷰의 의존성을 분리하기 위해서 컨트롤러라는 중간과정을 둔다
유지보수, 확장성, 유연성
완전히 분리할 수는 없어서 mvp, mvvm같은 아키텍쳐 패턴이 등장했다
